#!/usr/bin/env python3
"""
Script para configurar PostgreSQL localmente para desenvolvimento
"""

import os
import subprocess
import sys
from dotenv import load_dotenv

def run_command(command, description):
    """Executa um comando e mostra o resultado"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Sucesso!")
        if result.stdout:
            print(f"üìù Sa√≠da: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erro!")
        print(f"üìù Erro: {e.stderr.strip()}")
        return False

def check_postgres_installed():
    """Verifica se PostgreSQL est√° instalado"""
    print("üîç Verificando se PostgreSQL est√° instalado...")
    
    # Tentar diferentes comandos para Windows
    commands = ['psql', 'psql.exe', 'C:\\Program Files\\PostgreSQL\\15\\bin\\psql.exe', 'C:\\Program Files\\PostgreSQL\\16\\bin\\psql.exe']
    
    for cmd in commands:
        try:
            result = subprocess.run([cmd, '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ PostgreSQL encontrado: {result.stdout.strip()}")
                return cmd
        except FileNotFoundError:
            continue
    
    print("‚ùå PostgreSQL n√£o encontrado no PATH")
    return None

def create_database_and_user(psql_cmd):
    """Cria o banco e usu√°rio para o projeto"""
    print("üóÑÔ∏è Configurando banco de dados...")
    
    # Criar usu√°rio (Windows - sem sudo)
    print("üìù Criando usu√°rio escola_user...")
    create_user_cmd = f'"{psql_cmd}" -U postgres -c "CREATE USER escola_user WITH PASSWORD \'escola123\';"'
    
    if not run_command(create_user_cmd, "Criando usu√°rio escola_user"):
        print("‚ö†Ô∏è  Usu√°rio j√° existe ou erro na cria√ß√£o")
    
    # Criar banco
    print("üìù Criando banco escola_para_todos...")
    create_db_cmd = f'"{psql_cmd}" -U postgres -c "CREATE DATABASE escola_para_todos OWNER escola_user;"'
    
    if not run_command(create_db_cmd, "Criando banco escola_para_todos"):
        print("‚ö†Ô∏è  Banco j√° existe ou erro na cria√ß√£o")
    
    # Conceder privil√©gios
    grant_cmd = f'"{psql_cmd}" -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE escola_para_todos TO escola_user;"'
    run_command(grant_cmd, "Concedendo privil√©gios ao usu√°rio")
    
    # Conceder privil√©gios no schema public
    grant_schema_cmd = f'"{psql_cmd}" -U postgres -d escola_para_todos -c "GRANT ALL ON SCHEMA public TO escola_user;"'
    run_command(grant_schema_cmd, "Concedendo privil√©gios no schema")

def test_connection():
    """Testa a conex√£o com o banco"""
    print("üîç Testando conex√£o com PostgreSQL...")
    
    test_script = """
import psycopg
import os

try:
    conn = psycopg.connect(
        host='localhost',
        dbname='escola_para_todos',
        user='escola_user',
        password='escola123',
        port=5432
    )
    print('‚úÖ Conex√£o PostgreSQL funcionando!')
    conn.close()
except Exception as e:
    print(f'‚ùå Erro na conex√£o: {e}')
"""
    
    with open('test_connection.py', 'w') as f:
        f.write(test_script)
    
    if run_command("python test_connection.py", "Testando conex√£o"):
        os.remove('test_connection.py')
        return True
    return False

def install_requirements():
    """Instala as depend√™ncias Python"""
    print("üì¶ Instalando depend√™ncias Python...")
    run_command("pip install -r requirements.txt", "Instalando requirements.txt")

def create_env_file():
    """Cria arquivo .env se n√£o existir"""
    env_file = ".env"
    if os.path.exists(env_file):
        print(f"‚úÖ Arquivo {env_file} j√° existe")
        return
    
    print("üìù Criando arquivo .env...")
    env_content = """# Configura√ß√µes para PostgreSQL - Escola para Todos

# Configura√ß√µes da Aplica√ß√£o
FLASK_ENV=development
FLASK_DEBUG=1
SECRET_KEY=dev-secret-key-change-in-production

# Configura√ß√µes do Banco PostgreSQL Local
DB_HOST=localhost
DB_NAME=escola_para_todos
DB_USER=escola_user
DB_PASSWORD=escola123
DB_PORT=5432
"""
    
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Arquivo .env criado com sucesso!")

def show_postgres_commands(psql_cmd):
    """Mostra comandos √∫teis do PostgreSQL"""
    print("\nüóÑÔ∏è Comandos PostgreSQL √∫teis:")
    print(f"   Conectar como postgres: {psql_cmd} -U postgres")
    print(f"   Conectar ao banco: {psql_cmd} -U escola_user -d escola_para_todos")
    print("   Listar bancos: \\l")
    print("   Listar tabelas: \\dt")
    print("   Sair: \\q")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Configurando PostgreSQL para Escola para Todos")
    print("=" * 50)
    
    # Verificar se PostgreSQL est√° instalado
    psql_cmd = check_postgres_installed()
    if not psql_cmd:
        print("\n‚ùå PostgreSQL n√£o est√° instalado ou n√£o est√° no PATH!")
        print("üìã Para instalar no Windows:")
        print("   1. Baixe em: https://www.postgresql.org/download/windows/")
        print("   2. Execute o instalador")
        print("   3. Adicione o bin√°rio ao PATH")
        print("   4. Execute este script novamente")
        return
    
    # Criar banco e usu√°rio
    create_database_and_user(psql_cmd)
    
    # Instalar depend√™ncias
    install_requirements()
    
    # Testar conex√£o
    if not test_connection():
        print("‚ùå Erro na conex√£o com PostgreSQL")
        print("üìã Verifique se:")
        print("   1. PostgreSQL est√° rodando")
        print("   2. A senha do usu√°rio postgres est√° correta")
        print("   3. A porta 5432 est√° dispon√≠vel")
        return
    
    # Criar arquivo .env
    create_env_file()
    
    # Mostrar comandos √∫teis
    show_postgres_commands(psql_cmd)
    
    print("\nüéâ Configura√ß√£o conclu√≠da!")
    print("üìã Pr√≥ximos passos:")
    print("   1. Execute: python init_db_postgres.py")
    print("   2. Execute: python app_postgres.py")
    print("\nüåê Para produ√ß√£o no Render:")
    print("   1. O Render configurar√° automaticamente")
    print("   2. N√£o precisa de configura√ß√£o local")

if __name__ == "__main__":
    main()
